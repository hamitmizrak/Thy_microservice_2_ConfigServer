
#######################################################################################################################
#######################################################################################################################
############ END POINTS ###################################################################################################

# application.yml
# http://localhost:8888/application/default
# http://localhost:8888/application/dev
# http://localhost:8888/application/prod
# http://localhost:8888/product-service/default
# http://localhost:8888/user-service/default

# http://localhost:8761/
# http://localhost:8888/DenemeMicroservice/default

#######################################################################################################################
#######################################################################################################################
############ SERVER ###################################################################################################

# Spring Boot uygulamasında server adını belirtir.
# Dikkat : Mikroservislerde bu isim çok önemlidir.
# Mikroservislerin mimarisi gereğince mikroservislerin birbirini tanıması ve haberleşmesi için kritik bir öneme sahiptir.
# Spring cloud, mikroservislerde , Spring boot Actuator gibi durumlarda da önemlidir.
spring.application.name=config-server

# Config server için gerekli default port
server.port=8888

#######################################################################################################################
#######################################################################################################################
############ CONFIG SERVER ############################################################################################
# Spring cloud Config server konfigürasyonu dosyalarını alacağı git deposudur.
# Config client verileri buradaki Config server verilerinde çekecektir.(bootstrap.properties)
# Eğer git repomuz private ise : Personal Access Token eklememiz gerekiyor.
spring.cloud.config.server.git.uri=https://github.com/hamitmizrak/Thy_microservice_2_ConfigServer

# Config server git branchinden hangisini kullacaksak onu yazıyoruz.
# Default oalrak normalde: main branchini alır.
spring.cloud.config.server.git.default-label=master

# Config serverın git deposundaki konfigürasyonların dosyalarını arayacağını dizindir.
# NOT: bu dizini pom.xml dosyasındaki aynı hizada olmalıdır.
spring.cloud.config.server.git.search-paths=git-depo-configs

# Config serverda başladığında yapılandırma dosyalarından olan
# örneğin:application-test.properties dosyalarını klonlamasını sağlayacak yapıdır
spring.cloud.config.server.git.clone-on-start=true

## Profile Set Et
#spring.profiles.active=deneme-service
spring.profiles.active=native

spring.config.import=optional:configserver:http://localhost:8761


